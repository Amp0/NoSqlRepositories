using Newtonsoft.Json;
using NoSqlRepositories.Core;
using NoSqlRepositories.Core.Helpers;
using NoSqlRepositories.Core.NoSQLException;
using NoSqlRepositories.Json.Net.Helpers;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;

namespace NoSqlRepositories.MvvX.JsonFiles.Pcl
{
    public class JsonFileRepository<T> : INoSQLRepository<T> where T : class, IBaseEntity
    {
        #region Members

        /// <summary>
        /// File path where storing data
        /// </summary>
        private readonly string connectionString;

        public string DBName { get; set; }
        public string TypeName { get; set; }

        private string DbDirectoryPath
        {
            get
            {
                return Path.Combine(connectionString, "DB");
            }
        }

        private string AttachmentsDirectoryPath
        {
            get
            {
                return Path.Combine(DbDirectoryPath, "Attachments", TypeName);
            }
        }

        public string DbFilePath
        {
            get
            {
                return Path.Combine(DbDirectoryPath, TypeName + ".json");
            }
        }

        public bool AutoGeneratedEntityDate { get; set; } = true;

        private IDictionary<string, T> localDb;

        #endregion

        public JsonFileRepository(string connectionString)
        {
            if (string.IsNullOrWhiteSpace(connectionString))
                throw new ArgumentNullException();

            this.connectionString = connectionString;

            TypeName = typeof(T).Name;
            LoadJSONFile();
        }

        #region INoSQLRepository


        public T GetById(string id)
        {
            T elt;

            if (!localDb.TryGetValue(id, out elt))
            {
                throw new KeyNotFoundNoSQLException(string.Format("Id '{0}' not found in the repository '{1}'", id, DbFilePath));
            }

            if (elt.Deleted)
            {
                throw new KeyNotFoundNoSQLException(string.Format("Id '{0}' not found in the repository '{1}'", id, DbFilePath));
            }

            return elt;
        }

        public InsertResult InsertOne(T entity)
        {
            return InsertOne(entity, InsertMode.error_if_key_exists);
        }

        public InsertResult InsertOne(T entity, InsertMode keyExistsAction)
        {

            var insertResult = default(InsertResult);

            var date = NoSQLRepoHelper.DateTimeUtcNow();
            if (AutoGeneratedEntityDate)
            {
                entity.SystemCreationDate = date;
                entity.SystemLastUpdateDate = date;
            }

            NoSQLRepoHelper.SetIds(entity);

            if (localDb.ContainsKey(entity.Id))
            {
                if (keyExistsAction == InsertMode.error_if_key_exists)
                {
                    throw new DupplicateKeyNoSQLException();
                }
                else if (keyExistsAction == InsertMode.do_nothing_if_key_exists)
                {
                    return InsertResult.not_affected;
                }
                else if (keyExistsAction == InsertMode.erase_existing)
                {
                    entity.SystemCreationDate = localDb[entity.Id].SystemCreationDate; // keep the origin creation date of the entity
                    // Continue execution
                }
                insertResult = InsertResult.updated;
            }
            else
            {
                insertResult = InsertResult.inserted;
            }

            // Clone to not shared reference between App instance and repository persisted value
            // UTC : Ensure to store only utc datetime
            var entityToStore = NewtonJsonHelper.CloneJson(entity, DateTimeZoneHandling.Utc);

            localDb[entity.Id] = entityToStore;

            SaveJSONFile();
            return insertResult;
        }

        public BulkInsertResult<string> InsertMany(IEnumerable<T> entities)
        {
            return InsertMany(entities, InsertMode.db_implementation);
        }

        public BulkInsertResult<string> InsertMany(IEnumerable<T> entities, InsertMode insertMode)
        {
            if (insertMode != InsertMode.db_implementation)
                throw new NotImplementedException();

            var insertResult = new BulkInsertResult<string>();

            var creationDate = NoSQLRepoHelper.DateTimeUtcNow();

            foreach (var entity in entities)
            {
                if (AutoGeneratedEntityDate)
                    entity.SystemCreationDate = creationDate;
                if (AutoGeneratedEntityDate)
                    entity.SystemLastUpdateDate = creationDate;

                NoSQLRepoHelper.SetIds(entity);

                var entityToStore = NewtonJsonHelper.CloneJson(entity, DateTimeZoneHandling.Utc);
                localDb[entity.Id] = entityToStore;
                insertResult[entity.Id] = InsertResult.unknown;
            }
            SaveJSONFile();

            return insertResult;
        }

        public bool Exist(string id)
        {
            return localDb.Keys.Contains(id);
        }

        public UpdateResult Update(T entity)
        {
            return Update(entity, UpdateMode.db_implementation);
        }

        public UpdateResult Update(T entity, UpdateMode updateMode)
        {
            var updateResult = default(UpdateResult);

            if (updateMode == UpdateMode.upsert_if_missing_key)
            {
                throw new NotImplementedException();
            }

            var updateDate = NoSQLRepoHelper.DateTimeUtcNow();

            entity.SystemLastUpdateDate = updateDate;

            if (updateMode == UpdateMode.upsert_if_missing_key)
            {
                NoSQLRepoHelper.SetIds(entity);
                entity.SystemCreationDate = updateDate;
            }

            if (!localDb.ContainsKey(entity.Id))
            {
                if (updateMode == UpdateMode.error_if_missing_key)
                {
                    throw new KeyNotFoundNoSQLException("Misssing key '" + entity.Id + "'");
                }
                else if (updateMode == UpdateMode.do_nothing_if_missing_key)
                {
                    return UpdateResult.not_affected;
                }

                updateResult = UpdateResult.inserted;
            }

            localDb[entity.Id] = entity;

            SaveJSONFile();
            updateResult = UpdateResult.updated;

            return updateResult;
        }

        public long Delete(string id)
        {
            return Delete(id, true);
        }

        public long Delete(string id, bool physical)
        {
            if (!physical)
                throw new NotImplementedException();

            if (localDb.ContainsKey(id))
            {
                if (physical)
                {
                    localDb.Remove(id);
                }
                else
                {
                    localDb[id].Deleted = true;
                }
                SaveJSONFile();
                return 1;
            }
            else
            {
                return 0;
            }
        }

        public T TryGetById(string id)
        {
            T res;

            try
            {
                res = GetById(id);
            }
            catch (KeyNotFoundNoSQLException)
            {
                res = default(T);
            }
            return res;
        }

        public void InitCollection(List<Expression<Func<T, object>>> indexFieldSelectors)
        {
            throw new NotImplementedException();
        }

        #endregion

        #region INoSQLDB

        public long TruncateCollection()
        {
            var count = localDb.Keys.Count;
            localDb = new ConcurrentDictionary<string, T>();
            SaveJSONFile();
            return count;
        }

        public void SetCollectionName(string typeName)
        {
            TypeName = typeName;
            LoadJSONFile();
        }

        public string GetCollectionName()
        {
            return TypeName;
        }

        public void InitCollection()
        {
            // Autoinit, nothing to do
        }

        public void UseDatabase(string dbName)
        {
            throw new NotImplementedException();
        }

        public bool CollectionExists(bool createIfNotExists)
        {
            throw new NotImplementedException();
        }

        public void DropCollection()
        {
            this.localDb = new Dictionary<string, T>();
            SaveJSONFile();
        }

        #endregion

        #region Private methods

        private void LoadJSONFile()
        {
            if (File.Exists(DbFilePath))
            {
                string content = File.ReadAllText(DbFilePath);
                var settings = new JsonSerializerSettings()
                {
                    TypeNameHandling = TypeNameHandling.Objects,
                    DefaultValueHandling = DefaultValueHandling.Populate
                };

                this.localDb = JsonConvert.DeserializeObject<IDictionary<string, T>>(content, settings);

                if (this.localDb == null)
                    this.localDb = new ConcurrentDictionary<string, T>(); // Empty file
            }
            else
            {
                this.localDb = new Dictionary<string, T>();
            }
        }

        private void SaveJSONFile()
        {
            var settings = new JsonSerializerSettings()
            {
                TypeNameHandling = TypeNameHandling.Auto,
                NullValueHandling = NullValueHandling.Ignore,
                DefaultValueHandling = DefaultValueHandling.Ignore,
                TypeNameAssemblyFormat = System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple
            };

            string content = JsonConvert.SerializeObject(this.localDb, Formatting.Indented, settings);

            if (!Directory.Exists(DbDirectoryPath))
                Directory.CreateDirectory(DbDirectoryPath);

            File.WriteAllText(DbFilePath, content);
        }

        #endregion

        #region Attachments

        public void AddAttachment(string id, string filePathAttachment, string contentType, string attachmentName)
        {
            // TODO : Implements
            //var entityAttachmentDir = fileStore.PathCombine(AttachmentsDirectoryPath, id);
            //var attachmentFilePath = fileStore.PathCombine(entityAttachmentDir, attachmentName);
            //fileStore.EnsureFolderExists(entityAttachmentDir);
            //fileStore.TryCopy(filePathAttachment, attachmentFilePath, true);
        }

        public void RemoveAttachment(string id, string attachmentName)
        {
            var attachmentFilePath = Path.Combine(AttachmentsDirectoryPath, id, attachmentName);

            if (!Exist(id))
                throw new KeyNotFoundNoSQLException();

            if (!File.Exists(attachmentFilePath))
                throw new AttachmentNotFoundNoSQLException();

            File.Delete(attachmentFilePath);
        }

        public Stream GetAttachment(string id, string attachmentName)
        {
            var attachmentFilePath = Path.Combine(AttachmentsDirectoryPath, id, attachmentName);

            if (!Exist(id))
                throw new KeyNotFoundNoSQLException();

            if (!File.Exists(attachmentFilePath))
                throw new AttachmentNotFoundNoSQLException();

            return File.OpenRead(attachmentFilePath);

        }

        /// <summary>
        /// Return all entities of repository
        /// </summary>
        /// <returns></returns>
        public IEnumerable<T> GetAll()
        {
            LoadJSONFile();

            foreach (var key in localDb.Keys)
            {
                yield return localDb[key];
            }
        }

        /// <summary>
        /// Return the list of name of all attachements of a given entity
        /// </summary>
        /// <param name="idDocument"></param>
        /// <returns></returns>
        public IEnumerable<string> GetAttachmentNames(string idDocument)
        {
            var entityAttachmentDir = Path.Combine(AttachmentsDirectoryPath, idDocument);

            if (Directory.Exists(entityAttachmentDir))
                return Directory.EnumerateFiles(entityAttachmentDir);

            return new List<string>();
        }

        #endregion
    }
}
